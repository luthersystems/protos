// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: pdfserv/service.proto

package pdfserv

import (
	context "context"
	common "github.com/luthersystems/protos/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_pdfserv_service_proto protoreflect.FileDescriptor

var file_pdfserv_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x64, 0x66, 0x73, 0x65, 0x72, 0x76, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x64, 0x66, 0x73, 0x65, 0x72, 0x76,
	0x1a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70, 0x64, 0x66, 0x73,
	0x65, 0x72, 0x76, 0x2f, 0x70, 0x64, 0x66, 0x73, 0x65, 0x72, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0x98, 0x01, 0x0a, 0x03, 0x50, 0x44, 0x46, 0x12, 0x4e, 0x0a, 0x0b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x64, 0x66, 0x73, 0x65, 0x72, 0x76, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x70, 0x64, 0x66, 0x73, 0x65, 0x72, 0x76, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x54, 0x0a, 0x19,
	0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x75, 0x74, 0x68, 0x65, 0x72, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x2e, 0x70, 0x64, 0x66, 0x73, 0x65, 0x72, 0x76, 0x42, 0x0c, 0x50, 0x44, 0x46, 0x53, 0x65,
	0x72, 0x76, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x75, 0x74, 0x68, 0x65, 0x72, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x64, 0x66, 0x73, 0x65,
	0x72, 0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_pdfserv_service_proto_goTypes = []interface{}{
	(*common.GetHealthCheckRequest)(nil),  // 0: common.GetHealthCheckRequest
	(*GenerateRequest)(nil),               // 1: pdfserv.GenerateRequest
	(*common.GetHealthCheckResponse)(nil), // 2: common.GetHealthCheckResponse
	(*GenerateResponse)(nil),              // 3: pdfserv.GenerateResponse
}
var file_pdfserv_service_proto_depIdxs = []int32{
	0, // 0: pdfserv.PDF.HealthCheck:input_type -> common.GetHealthCheckRequest
	1, // 1: pdfserv.PDF.Generate:input_type -> pdfserv.GenerateRequest
	2, // 2: pdfserv.PDF.HealthCheck:output_type -> common.GetHealthCheckResponse
	3, // 3: pdfserv.PDF.Generate:output_type -> pdfserv.GenerateResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pdfserv_service_proto_init() }
func file_pdfserv_service_proto_init() {
	if File_pdfserv_service_proto != nil {
		return
	}
	file_pdfserv_pdfserv_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pdfserv_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pdfserv_service_proto_goTypes,
		DependencyIndexes: file_pdfserv_service_proto_depIdxs,
	}.Build()
	File_pdfserv_service_proto = out.File
	file_pdfserv_service_proto_rawDesc = nil
	file_pdfserv_service_proto_goTypes = nil
	file_pdfserv_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PDFClient is the client API for PDF service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PDFClient interface {
	// Check the health of the PDF generator.
	HealthCheck(ctx context.Context, in *common.GetHealthCheckRequest, opts ...grpc.CallOption) (*common.GetHealthCheckResponse, error)
	// Generate PDF.
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
}

type pDFClient struct {
	cc grpc.ClientConnInterface
}

func NewPDFClient(cc grpc.ClientConnInterface) PDFClient {
	return &pDFClient{cc}
}

func (c *pDFClient) HealthCheck(ctx context.Context, in *common.GetHealthCheckRequest, opts ...grpc.CallOption) (*common.GetHealthCheckResponse, error) {
	out := new(common.GetHealthCheckResponse)
	err := c.cc.Invoke(ctx, "/pdfserv.PDF/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDFClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, "/pdfserv.PDF/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PDFServer is the server API for PDF service.
type PDFServer interface {
	// Check the health of the PDF generator.
	HealthCheck(context.Context, *common.GetHealthCheckRequest) (*common.GetHealthCheckResponse, error)
	// Generate PDF.
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
}

// UnimplementedPDFServer can be embedded to have forward compatible implementations.
type UnimplementedPDFServer struct {
}

func (*UnimplementedPDFServer) HealthCheck(context.Context, *common.GetHealthCheckRequest) (*common.GetHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedPDFServer) Generate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}

func RegisterPDFServer(s *grpc.Server, srv PDFServer) {
	s.RegisterService(&_PDF_serviceDesc, srv)
}

func _PDF_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDFServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdfserv.PDF/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDFServer).HealthCheck(ctx, req.(*common.GetHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDF_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDFServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdfserv.PDF/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDFServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PDF_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pdfserv.PDF",
	HandlerType: (*PDFServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _PDF_HealthCheck_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _PDF_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pdfserv/service.proto",
}
