// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pdfserv/service.proto

package pdfserv

import (
	context "context"
	common "github.com/luthersystems/protos/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PDF_HealthCheck_FullMethodName = "/pdfserv.PDF/HealthCheck"
	PDF_Generate_FullMethodName    = "/pdfserv.PDF/Generate"
)

// PDFClient is the client API for PDF service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PDFClient interface {
	// Check the health of the PDF generator.
	HealthCheck(ctx context.Context, in *common.GetHealthCheckRequest, opts ...grpc.CallOption) (*common.GetHealthCheckResponse, error)
	// Generate PDF.
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
}

type pDFClient struct {
	cc grpc.ClientConnInterface
}

func NewPDFClient(cc grpc.ClientConnInterface) PDFClient {
	return &pDFClient{cc}
}

func (c *pDFClient) HealthCheck(ctx context.Context, in *common.GetHealthCheckRequest, opts ...grpc.CallOption) (*common.GetHealthCheckResponse, error) {
	out := new(common.GetHealthCheckResponse)
	err := c.cc.Invoke(ctx, PDF_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDFClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, PDF_Generate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PDFServer is the server API for PDF service.
// All implementations must embed UnimplementedPDFServer
// for forward compatibility
type PDFServer interface {
	// Check the health of the PDF generator.
	HealthCheck(context.Context, *common.GetHealthCheckRequest) (*common.GetHealthCheckResponse, error)
	// Generate PDF.
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	mustEmbedUnimplementedPDFServer()
}

// UnimplementedPDFServer must be embedded to have forward compatible implementations.
type UnimplementedPDFServer struct {
}

func (UnimplementedPDFServer) HealthCheck(context.Context, *common.GetHealthCheckRequest) (*common.GetHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedPDFServer) Generate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedPDFServer) mustEmbedUnimplementedPDFServer() {}

// UnsafePDFServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PDFServer will
// result in compilation errors.
type UnsafePDFServer interface {
	mustEmbedUnimplementedPDFServer()
}

func RegisterPDFServer(s grpc.ServiceRegistrar, srv PDFServer) {
	s.RegisterService(&PDF_ServiceDesc, srv)
}

func _PDF_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDFServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PDF_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDFServer).HealthCheck(ctx, req.(*common.GetHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDF_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDFServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PDF_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDFServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PDF_ServiceDesc is the grpc.ServiceDesc for PDF service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PDF_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdfserv.PDF",
	HandlerType: (*PDFServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _PDF_HealthCheck_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _PDF_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pdfserv/service.proto",
}
