// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/luthersystems/protos/common/exception.proto

package common

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type of exception.
type Exception_Type int32

const (
	// Default for no exception.
	Exception_INVALID_TYPE Exception_Type = 0
	// Business logic error.
	Exception_BUSINESS Exception_Type = 1
	// A service was unavailable.
	Exception_SERVICE_NOT_AVAILABLE Exception_Type = 2
	// Infrastructure was down.
	Exception_INFRASTRUCTURE Exception_Type = 3
	// Catch-all for all other types.
	Exception_UNEXPECTED Exception_Type = 4
	// Security related error.
	Exception_SECURITY_VIOLATION Exception_Type = 5
)

var Exception_Type_name = map[int32]string{
	0: "INVALID_TYPE",
	1: "BUSINESS",
	2: "SERVICE_NOT_AVAILABLE",
	3: "INFRASTRUCTURE",
	4: "UNEXPECTED",
	5: "SECURITY_VIOLATION",
}

var Exception_Type_value = map[string]int32{
	"INVALID_TYPE":          0,
	"BUSINESS":              1,
	"SERVICE_NOT_AVAILABLE": 2,
	"INFRASTRUCTURE":        3,
	"UNEXPECTED":            4,
	"SECURITY_VIOLATION":    5,
}

func (x Exception_Type) String() string {
	return proto.EnumName(Exception_Type_name, int32(x))
}

func (Exception_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_065aea34ad0dab8f, []int{0, 0}
}

// General message for exceptions.
type Exception struct {
	// UUID for exception.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of exception.
	Type Exception_Type `protobuf:"varint,2,opt,name=type,proto3,enum=common.Exception_Type" json:"type,omitempty"`
	// Timestamp for when the exception occurred (RFC3339).
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Human readable description of exception.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Additional metadata about the exception.
	ExceptionMetadata    map[string]string `protobuf:"bytes,5,rep,name=exception_metadata,json=exceptionMetadata,proto3" json:"exception_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Exception) Reset()         { *m = Exception{} }
func (m *Exception) String() string { return proto.CompactTextString(m) }
func (*Exception) ProtoMessage()    {}
func (*Exception) Descriptor() ([]byte, []int) {
	return fileDescriptor_065aea34ad0dab8f, []int{0}
}

func (m *Exception) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Exception.Unmarshal(m, b)
}
func (m *Exception) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Exception.Marshal(b, m, deterministic)
}
func (m *Exception) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exception.Merge(m, src)
}
func (m *Exception) XXX_Size() int {
	return xxx_messageInfo_Exception.Size(m)
}
func (m *Exception) XXX_DiscardUnknown() {
	xxx_messageInfo_Exception.DiscardUnknown(m)
}

var xxx_messageInfo_Exception proto.InternalMessageInfo

func (m *Exception) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Exception) GetType() Exception_Type {
	if m != nil {
		return m.Type
	}
	return Exception_INVALID_TYPE
}

func (m *Exception) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Exception) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Exception) GetExceptionMetadata() map[string]string {
	if m != nil {
		return m.ExceptionMetadata
	}
	return nil
}

// Exception messages.
type ExceptionResponse struct {
	// An exception if an error occurred during processing request.
	Exception            *Exception `protobuf:"bytes,1,opt,name=exception,proto3" json:"exception,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ExceptionResponse) Reset()         { *m = ExceptionResponse{} }
func (m *ExceptionResponse) String() string { return proto.CompactTextString(m) }
func (*ExceptionResponse) ProtoMessage()    {}
func (*ExceptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_065aea34ad0dab8f, []int{1}
}

func (m *ExceptionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExceptionResponse.Unmarshal(m, b)
}
func (m *ExceptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExceptionResponse.Marshal(b, m, deterministic)
}
func (m *ExceptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExceptionResponse.Merge(m, src)
}
func (m *ExceptionResponse) XXX_Size() int {
	return xxx_messageInfo_ExceptionResponse.Size(m)
}
func (m *ExceptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExceptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExceptionResponse proto.InternalMessageInfo

func (m *ExceptionResponse) GetException() *Exception {
	if m != nil {
		return m.Exception
	}
	return nil
}

func init() {
	proto.RegisterEnum("common.Exception_Type", Exception_Type_name, Exception_Type_value)
	proto.RegisterType((*Exception)(nil), "common.Exception")
	proto.RegisterMapType((map[string]string)(nil), "common.Exception.ExceptionMetadataEntry")
	proto.RegisterType((*ExceptionResponse)(nil), "common.ExceptionResponse")
}

func init() {
	proto.RegisterFile("github.com/luthersystems/protos/common/exception.proto", fileDescriptor_065aea34ad0dab8f)
}

var fileDescriptor_065aea34ad0dab8f = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x8b, 0xd3, 0x40,
	0x14, 0xc6, 0x4d, 0xd2, 0x2e, 0xe6, 0x75, 0x09, 0xe9, 0x43, 0x4b, 0x14, 0x0f, 0xa5, 0x07, 0x29,
	0x1e, 0x12, 0xa8, 0x20, 0xe2, 0x2d, 0x6d, 0x47, 0x18, 0xa8, 0x69, 0x99, 0x4c, 0xaa, 0xeb, 0x25,
	0x64, 0xd3, 0xc1, 0x0d, 0x6e, 0x3a, 0xa1, 0x33, 0x15, 0x73, 0xf0, 0xcf, 0xf1, 0xff, 0x94, 0x26,
	0x35, 0xab, 0xae, 0x87, 0xbd, 0xbd, 0xf7, 0xbd, 0xef, 0x9b, 0x99, 0xdf, 0xf0, 0xe0, 0xcd, 0x97,
	0x42, 0xdf, 0x1c, 0xaf, 0xfd, 0x5c, 0x96, 0xc1, 0xed, 0x51, 0xdf, 0x88, 0x83, 0xaa, 0x95, 0x16,
	0xa5, 0x0a, 0xaa, 0x83, 0xd4, 0x52, 0x05, 0xb9, 0x2c, 0x4b, 0xb9, 0x0f, 0xc4, 0xf7, 0x5c, 0x54,
	0xba, 0x90, 0x7b, 0xbf, 0xd1, 0xf1, 0xa2, 0xd5, 0x27, 0x3f, 0x2d, 0xb0, 0xc9, 0xef, 0x19, 0x3a,
	0x60, 0x16, 0x3b, 0xcf, 0x18, 0x1b, 0x53, 0x9b, 0x99, 0xc5, 0x0e, 0x5f, 0x41, 0x4f, 0xd7, 0x95,
	0xf0, 0xcc, 0xb1, 0x31, 0x75, 0x66, 0x23, 0xbf, 0x0d, 0xf9, 0x5d, 0xc0, 0xe7, 0x75, 0x25, 0x58,
	0xe3, 0xc1, 0x17, 0x60, 0xeb, 0xa2, 0x14, 0x4a, 0x67, 0x65, 0xe5, 0x59, 0xcd, 0x11, 0x77, 0x02,
	0x8e, 0x61, 0xb0, 0x13, 0x2a, 0x3f, 0x14, 0x4d, 0xce, 0xeb, 0x35, 0xf3, 0x3f, 0x25, 0xfc, 0x08,
	0xd8, 0x3d, 0x32, 0x2d, 0x85, 0xce, 0x76, 0x99, 0xce, 0xbc, 0xfe, 0xd8, 0x9a, 0x0e, 0x66, 0xd3,
	0xfb, 0x37, 0x77, 0xd5, 0x87, 0xb3, 0x95, 0xec, 0xf5, 0xa1, 0x66, 0x43, 0xf1, 0xaf, 0xfe, 0x7c,
	0x09, 0xa3, 0xff, 0x9b, 0xd1, 0x05, 0xeb, 0xab, 0xa8, 0xcf, 0xbc, 0xa7, 0x12, 0x9f, 0x40, 0xff,
	0x5b, 0x76, 0x7b, 0x6c, 0x89, 0x6d, 0xd6, 0x36, 0xef, 0xcc, 0xb7, 0xc6, 0xe4, 0x07, 0xf4, 0x4e,
	0xb0, 0xe8, 0xc2, 0x25, 0x8d, 0xb6, 0xe1, 0x8a, 0x2e, 0x53, 0x7e, 0xb5, 0x21, 0xee, 0x23, 0xbc,
	0x84, 0xc7, 0xf3, 0x24, 0xa6, 0x11, 0x89, 0x63, 0xd7, 0xc0, 0x67, 0xf0, 0x34, 0x26, 0x6c, 0x4b,
	0x17, 0x24, 0x8d, 0xd6, 0x3c, 0x0d, 0xb7, 0x21, 0x5d, 0x85, 0xf3, 0x15, 0x71, 0x4d, 0x44, 0x70,
	0x68, 0xf4, 0x9e, 0x85, 0x31, 0x67, 0xc9, 0x82, 0x27, 0x8c, 0xb8, 0x16, 0x3a, 0x00, 0x49, 0x44,
	0x3e, 0x6d, 0xc8, 0x82, 0x93, 0xa5, 0xdb, 0xc3, 0x11, 0x60, 0x4c, 0x16, 0x09, 0xa3, 0xfc, 0x2a,
	0xdd, 0xd2, 0xf5, 0x2a, 0xe4, 0x74, 0x1d, 0xb9, 0xfd, 0xc9, 0x12, 0x86, 0x1d, 0x04, 0x13, 0xaa,
	0x92, 0x7b, 0x25, 0x30, 0x00, 0xbb, 0xc3, 0x6d, 0x28, 0x06, 0xb3, 0xe1, 0xbd, 0x9f, 0x62, 0x77,
	0x9e, 0x39, 0x07, 0x2f, 0x97, 0xa5, 0xff, 0xd7, 0xa2, 0x9c, 0x03, 0x73, 0xa7, 0x4b, 0x6c, 0x4e,
	0x1b, 0xb2, 0x31, 0x3e, 0xbf, 0x7c, 0xd8, 0x6e, 0x5d, 0x5f, 0x34, 0xed, 0xeb, 0x5f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x9f, 0xb2, 0x63, 0x5c, 0x8c, 0x02, 0x00, 0x00,
}
