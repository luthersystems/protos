syntax = "proto3";

package connectors.v1;

import "annotations/v1/sensitive.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "buf.build/gen/go/luthersystems/protos/protocolbuffers/go/connectors/v1";

// Connects to Google's Gemini AI, enabling multimodal AI processing, including text, image, and code generation.
message GoogleGeminiConfig {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Google Gemini"
      description: "Connects to Google's Gemini AI, enabling multimodal AI processing, including text, image, and code generation.\n@category: AI"
    }
  };

  string api_key = 1 [(annotations.v1.sensitive) = true];      // API key for authenticating with the Gemini API
  string base_url = 2;                                         // Base URL for Gemini API access
  string host_url = 3;                                         // Optional: host URL for routing requests
}
